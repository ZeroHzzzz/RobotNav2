bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 50
    default_server_timeout: 50
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
      default_nav_to_pose_bt_xml: "/home/zerohzzzz/Documents/RobotNav2/src/map_build/behavior_trees/custom.xml"
    navigate_through_poses:
      plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_are_error_codes_active_condition_bt_node
      - nav2_would_a_controller_recovery_help_condition_bt_node
      - nav2_would_a_planner_recovery_help_condition_bt_node
      - nav2_would_a_smoother_recovery_help_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node
    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

controller_server:
  ros__parameters:
    controller_frequency: 5.0
    min_x_velocity_threshold: 0.05
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 1.0
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["precise_goal_checker"]  # 使用准确的Goal Checker
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    # Goal checker parameters (使用精确的goal checker)
    precise_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.1  # 更严格的XY容差，0.05米
      yaw_goal_tolerance: 0.1 # 更严格的朝向容差，0.05弧度（约2.86度）
      stateful: True           # 使用状态来判断目标是否已经到达

    # DWB parameters (控制器参数)
    FollowPath:
      # plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      # desired_linear_vel: 0.5
      # lookahead_dist: 0.6
      # min_lookahead_dist: 0.3
      # max_lookahead_dist: 0.9
      # lookahead_time: 0.5  # 控制碰撞的提前量
      # rotate_to_heading_angular_vel: 1.8
      # transform_tolerance: 1.0
      # use_velocity_scaled_lookahead_dist: false
      # min_approach_linear_velocity: 0.05
      # approach_velocity_scaling_dist: 1.0
      # use_collision_detection: true
      # max_allowed_time_to_collision_up_to_carrot: 0.5
      # use_regulated_linear_velocity_scaling: true
      # use_cost_regulated_linear_velocity_scaling: false
      # regulated_linear_scaling_min_radius: 0.9
      # regulated_linear_scaling_min_speed: 0.25
      # use_fixed_curvature_lookahead: false
      # curvature_lookahead_dist: 1.0
      # use_rotate_to_heading: true
      # rotate_to_heading_min_angle: 0.785  # 大约45度
      # max_angular_accel: 3.2
      # max_robot_pose_search_dist: 10.0
      # interpolate_curvature_after_goal: false
      # cost_scaling_dist: 0.15
      # cost_scaling_gain: 1.0
      # inflation_cost_scaling_factor: 5.0
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: -0.80
      min_vel_y: -0.80
      max_vel_x: 0.80
      max_vel_y: 0.80
      max_vel_theta: 2.5
      min_speed_xy: -0.8
      max_speed_xy: 0.8
      min_speed_theta: -2.5
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 3.0
      acc_lim_y: 3.0
      acc_lim_theta: 0.0
      decel_lim_x: -3.0
      decel_lim_y: -3.0
      decel_lim_theta: 0.0
      vx_samples: 20
      vy_samples: 20
      vtheta_samples: 0
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0


global_costmap:
  global_costmap:
    ros__parameters:
      footprint_padding: 0.03 # 墙体缓冲区大小
      update_frequency: 10.0
      publish_frequency: 10.0
      global_frame: map
      robot_base_frame: base_link
      robot_radius: 0.22 # radius set and used, so no footprint points
      resolution: 0.05 # 分辨率
      plugins: ["static_layer", "obstacle_layer", "voxel_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        footprint_clearing_enabled: true # 是否启用机器人在移动时自动清除被覆盖的障碍物
        max_obstacle_height: 2.0
        combination_method: 1 # 定义如何组合不同来源的数据。通常使用 1，表示将所有数据源的结果取最大值
        scan:
          topic: /scan
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
          observation_persistence: 1.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          inf_is_valid: false
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        footprint_clearing_enabled: true
        max_obstacle_height: 2.0
        publish_voxel_map: True # 3D 障碍物感知
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        unknown_threshold: 15
        mark_threshold: 0
        observation_sources: pointcloud
        combination_method: 1
        pointcloud:  # no frame set, uses frame from message
          topic: /intel_realsense_r200_depth/points
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.5
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.5 # 障碍物周围膨胀的半径
        cost_scaling_factor: 2.0 # 障碍物的代价随着离障碍物的距离衰减参数
        inflate_unknown: false
        inflate_around_unknown: true
      always_send_full_costmap: True


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0  # 每秒更新代价地图的频率
      publish_frequency: 10.0  # 发布代价地图的频率
      global_frame: map  # 全局参考坐标系
      robot_base_frame: base_link  # 机器人底盘的坐标系
      use_sim_time: True  # 是否使用仿真时间
      rolling_window: true  # 滚动窗口模式，适合动态地图
      width: 2  # 局部代价地图的宽度，单位为米
      height: 2  # 局部代价地图的高度，单位为米
      resolution: 0.05  # 代价地图的分辨率，单位为米/像素
      track_unknown_space: true  # 是否跟踪未知空间
      transform_tolerance: 0.2  # TF坐标转换的最大容忍延迟

      # 障碍物层配置
      obstacle_layer:
        enabled: True
        min_obstacle_size: 0.1
        max_obstacle_height: 2.0  # 最大障碍物高度，超过此值的物体将不被视为障碍物
        obstacle_range: 2.0  # 最大障碍物检测范围
        raytrace_range: 3.0  # 激光雷达的射线跟踪范围
        inflation_radius: 0.1  # 障碍物周围膨胀的半径
        observation_sources: laser_scan_sensor  # 传感器源
        laser_scan_sensor:  # 激光扫描传感器配置
          topic: /scan  # 激光雷达的数据话题
          sensor_frame: laser_frame  # 激光雷达的坐标系
          clearing: True  # 是否清除障碍物
          marking: True  # 是否标记障碍物

      # 膨胀层配置
      inflation_layer:
        enabled: True
        inflation_radius: 0.2  # 膨胀半径，控制障碍物周围的代价区域大小
        cost_scaling_factor: 2.0  # 控制代价随距离增加的速率

      # 静态地图层（如全局代价地图使用）
      static_layer:
        enabled: True
        map_topic: /map  # 地图数据的发布话题
        obstacle_threshold: 0.1  # 阈值，决定哪些区域是障碍物
        track_unknown_space: true  # 是否处理未知空间
        map_subscribe_transient_local: true
        subscribe_to_updates: true

      # 清除层（动态障碍物的处理）
      clearing_layer:
        enabled: True
        min_obstacle_size: 0.6  # 过滤掉小于这个大小的障碍物
        clear_unknown_space: True  # 是否清除未知区域

      # 足迹（机器人外形）的配置
      footprint: "[[0.2, 0.1], [0.2, -0.1], [-0.2, -0.1], [-0.2, 0.1]]"  # 机器人足迹的顶点列表
      footprint_padding: 0.01  # 足迹周围的缓冲区，避免碰撞

      # 地图元数据
      plugins:
        - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
        - {name: inflation_layer, type: "costmap_2d::InflationLayer"}


# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
# map_server:
#   ros__parameters:
#     yaml_filename: ""

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_navfn_planner/NavfnPlanner"
#       tolerance: 0.5
#       use_astar: false
#       allow_unknown: true

planner_server:
  ros__parameters:
    expected_planner_frequency: 10.0
    planner_plugin_ids: ["GridBased"]
    GridBased:
      plugin_types: "nav2_theta_star_planner/ThetaStarPlanner"
      how_many_corners: 8
      w_euc_cost: 1.0
      w_traversal_cost: 2.0
  
smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 5.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    local_frame: map
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 1.0
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 5.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.26, 0.26, 1.0]
    min_velocity: [-0.26, -0.26, -1.0]
    max_accel: [2.5, 2.5, 3.2]
    max_decel: [-2.5, -2.5, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
